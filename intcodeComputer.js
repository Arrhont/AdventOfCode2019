const inputArray = [
    3,
    225,
    1,
    225,
    6,
    6,
    1100,
    1,
    238,
    225,
    104,
    0,
    1101,
    40,
    71,
    224,
    1001,
    224,
    -111,
    224,
    4,
    224,
    1002,
    223,
    8,
    223,
    101,
    7,
    224,
    224,
    1,
    224,
    223,
    223,
    1102,
    66,
    6,
    225,
    1102,
    22,
    54,
    225,
    1,
    65,
    35,
    224,
    1001,
    224,
    -86,
    224,
    4,
    224,
    102,
    8,
    223,
    223,
    101,
    6,
    224,
    224,
    1,
    224,
    223,
    223,
    1102,
    20,
    80,
    225,
    101,
    92,
    148,
    224,
    101,
    -162,
    224,
    224,
    4,
    224,
    1002,
    223,
    8,
    223,
    101,
    5,
    224,
    224,
    1,
    224,
    223,
    223,
    1102,
    63,
    60,
    225,
    1101,
    32,
    48,
    225,
    2,
    173,
    95,
    224,
    1001,
    224,
    -448,
    224,
    4,
    224,
    102,
    8,
    223,
    223,
    1001,
    224,
    4,
    224,
    1,
    224,
    223,
    223,
    1001,
    91,
    16,
    224,
    101,
    -79,
    224,
    224,
    4,
    224,
    1002,
    223,
    8,
    223,
    101,
    3,
    224,
    224,
    1,
    224,
    223,
    223,
    1101,
    13,
    29,
    225,
    1101,
    71,
    70,
    225,
    1002,
    39,
    56,
    224,
    1001,
    224,
    -1232,
    224,
    4,
    224,
    102,
    8,
    223,
    223,
    101,
    4,
    224,
    224,
    1,
    223,
    224,
    223,
    1101,
    14,
    59,
    225,
    102,
    38,
    143,
    224,
    1001,
    224,
    -494,
    224,
    4,
    224,
    102,
    8,
    223,
    223,
    101,
    3,
    224,
    224,
    1,
    224,
    223,
    223,
    1102,
    30,
    28,
    224,
    1001,
    224,
    -840,
    224,
    4,
    224,
    1002,
    223,
    8,
    223,
    101,
    4,
    224,
    224,
    1,
    223,
    224,
    223,
    4,
    223,
    99,
    0,
    0,
    0,
    677,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1105,
    0,
    99999,
    1105,
    227,
    247,
    1105,
    1,
    99999,
    1005,
    227,
    99999,
    1005,
    0,
    256,
    1105,
    1,
    99999,
    1106,
    227,
    99999,
    1106,
    0,
    265,
    1105,
    1,
    99999,
    1006,
    0,
    99999,
    1006,
    227,
    274,
    1105,
    1,
    99999,
    1105,
    1,
    280,
    1105,
    1,
    99999,
    1,
    225,
    225,
    225,
    1101,
    294,
    0,
    0,
    105,
    1,
    0,
    1105,
    1,
    99999,
    1106,
    0,
    300,
    1105,
    1,
    99999,
    1,
    225,
    225,
    225,
    1101,
    314,
    0,
    0,
    106,
    0,
    0,
    1105,
    1,
    99999,
    107,
    677,
    226,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    329,
    1001,
    223,
    1,
    223,
    8,
    226,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    344,
    101,
    1,
    223,
    223,
    7,
    226,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    359,
    101,
    1,
    223,
    223,
    1007,
    677,
    226,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    374,
    1001,
    223,
    1,
    223,
    1007,
    677,
    677,
    224,
    1002,
    223,
    2,
    223,
    1006,
    224,
    389,
    101,
    1,
    223,
    223,
    1008,
    226,
    226,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    404,
    1001,
    223,
    1,
    223,
    108,
    677,
    226,
    224,
    1002,
    223,
    2,
    223,
    1006,
    224,
    419,
    1001,
    223,
    1,
    223,
    1108,
    677,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    434,
    1001,
    223,
    1,
    223,
    108,
    226,
    226,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    449,
    101,
    1,
    223,
    223,
    7,
    677,
    677,
    224,
    1002,
    223,
    2,
    223,
    1006,
    224,
    464,
    1001,
    223,
    1,
    223,
    8,
    226,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    479,
    1001,
    223,
    1,
    223,
    107,
    226,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    494,
    101,
    1,
    223,
    223,
    1007,
    226,
    226,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    509,
    1001,
    223,
    1,
    223,
    1107,
    226,
    677,
    224,
    102,
    2,
    223,
    223,
    1005,
    224,
    524,
    1001,
    223,
    1,
    223,
    108,
    677,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    539,
    101,
    1,
    223,
    223,
    1107,
    677,
    226,
    224,
    102,
    2,
    223,
    223,
    1005,
    224,
    554,
    1001,
    223,
    1,
    223,
    107,
    677,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    569,
    101,
    1,
    223,
    223,
    8,
    677,
    226,
    224,
    102,
    2,
    223,
    223,
    1005,
    224,
    584,
    1001,
    223,
    1,
    223,
    7,
    677,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    599,
    101,
    1,
    223,
    223,
    1008,
    677,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    614,
    101,
    1,
    223,
    223,
    1008,
    677,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    629,
    1001,
    223,
    1,
    223,
    1108,
    677,
    677,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    644,
    101,
    1,
    223,
    223,
    1108,
    226,
    677,
    224,
    1002,
    223,
    2,
    223,
    1005,
    224,
    659,
    1001,
    223,
    1,
    223,
    1107,
    226,
    226,
    224,
    102,
    2,
    223,
    223,
    1006,
    224,
    674,
    1001,
    223,
    1,
    223,
    4,
    223,
    99,
    226
];

class Program extends Array {
    opcode01(instructionPointer, params) {
        const firstOperandIsInImmediateMode = params[2];
        const secondOperandIsInImmediateMode = params[1];
        const firstOperandIndex = this[instructionPointer + 1];
        const secondOperandIndex = this[instructionPointer + 2];
        const target = this[instructionPointer + 3];

        const firstOperand = firstOperandIsInImmediateMode
            ? firstOperandIndex
            : this[firstOperandIndex];

        const secondOperand = secondOperandIsInImmediateMode
            ? secondOperandIndex
            : this[secondOperandIndex];

        this[target] = firstOperand + secondOperand;

        return instructionPointer + 4;
    }

    opcode02(instructionPointer, params) {
        const firstOperandIsInImmediateMode = params[2];
        const secondOperandIsInImmediateMode = params[1];
        const firstOperandIndex = this[instructionPointer + 1];
        const secondOperandIndex = this[instructionPointer + 2];
        const target = this[instructionPointer + 3];

        const firstOperand = firstOperandIsInImmediateMode
            ? firstOperandIndex
            : this[firstOperandIndex];

        const secondOperand = secondOperandIsInImmediateMode
            ? secondOperandIndex
            : this[secondOperandIndex];

        this[target] = firstOperand * secondOperand;

        return instructionPointer + 4;
    }

    opcode03(instructionPointer, input) {
        const target = this[instructionPointer + 1];
        this[target] = input;

        return instructionPointer + 2;
    }

    opcode04(instructionPointer) {
        const target = this[instructionPointer + 1];
        console.log(this[target]);

        return instructionPointer + 2;
    }

    opcode99(instructionPointer) {
        console.log(`Program stopped at ${instructionPointer}`);

        return this;
    }
}

function opcodeParse(paramOpcode) {
    const opcodeArray = [];
    const opcodeString = String(paramOpcode)

    for (const char of opcodeString) {
        const number = Number(char);

        if (isNaN(number)) {
            throw new Error(`Invalid opcode: ${char}. Number expected.`);
        }

        opcodeArray.push(number);
    }

    while (opcodeArray.length < 5) {
        opcodeArray.unshift(0);
    }

    const opcode = String(opcodeArray[3]) + String(opcodeArray[4]);
    const params = opcodeArray.slice(0, 3);

    return { opcode, params };
}

function intcodeComputer(program, input) {
    let instructionPointer = 0;

    while (instructionPointer <= program.length) {
        const { opcode, params } = opcodeParse(program[instructionPointer]);

        switch (opcode) {
            case '01':
                instructionPointer = program.opcode01(
                    instructionPointer,
                    params
                );
                break;
            case '02':
                instructionPointer = program.opcode02(
                    instructionPointer,
                    params
                );
                break;
            case '03':
                instructionPointer = program.opcode03(
                    instructionPointer,
                    input
                );
                break;
            case '04':
                instructionPointer = program.opcode04(instructionPointer);
                break;
            case '99':
                return program.opcode99(instructionPointer);
            default:
                break;
        }
    }

    return program;
}

function inputFind(inputArray, findingValue) {
    for (let noun = 0; noun < 100; noun++) {
        for (let verb = 0; verb < 100; verb++) {
            inputArray.splice(1, 2, noun, verb);
            const santaSpaceProgram = new Program(...inputArray);
            intcodeComputer(santaSpaceProgram);
            if (santaSpaceProgram[0] === findingValue) {
                return 100 * noun + verb;
            }
        }
    }
    return 'cant find this';
}

const program = new Program(...inputArray);
intcodeComputer(program, 1);